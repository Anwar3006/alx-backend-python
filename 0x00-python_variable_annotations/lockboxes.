# A key to a box must be found in the boxes that come before the box itself
# have an array of arrays
# loop through the content and store the content in a new array
# Check the index of the box before the current one to see if it is in the new_array
# if it is then proceed; if it isnt then stop and return false
# , .
theList = set([])
#len(boxes) == 5 i = index
#{i : boxes[i]} = {0 : [1]}
        # print(boxes[i][j])
    # print("done with one; on to the next")
def toSet(lst):
    """
    To convert 2D list to 1D list
    """
    mySet = []
    for i in range(len(lst)):
        for j in range(len(lst[i])):
            mySet.append(lst[i][j])
    mySet = list(dict.fromkeys(mySet))
    return mySet

def canFind(boxes, e):
    for i in boxes:
        if e == i:
            return True
    return False

def canUnlockAll(boxes):
    mySet = toSet(boxes)
    print(mySet)
    status = True
    key = 1
    while(status):
        status = canFind(mySet, key)
        key += 1
        if status == False:
            return "False"
        if key == len(mySet):
            return "True"

# lst = [0, 4, 6]
# print(canFind(lst, 5))
# boxes = [[1, 4, 6], [2], [0, 4, 1], [5, 6, 2], [3], [4, 1], [6]]
boxes = [[1, 4], [2], [0, 4, 1], [3], [], [4, 1], [5, 6]]
print(canUnlockAll(boxes))      
